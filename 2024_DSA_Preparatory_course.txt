//Arrrays in Data Structure 

Traversal of array - use for loop

//Insertion ar a specific position

ar = {1,2,3,4,5};

//pos = 3 => index = 2
At index 2 we have '3'. Now if we start swapping from index 2 we will overwrite rest of the data.
Hence swapping should begin from the end of the array

printf("Enter position");
scanf("%d",&pos);

if(pos <= 0 || pos > size+1){
	printf("Invalid position");
	exit(0); //just do something to stop the program
}
else{
  for(i = size-1; i>= pos-1; i--){
	a[i+1] = a[i];
}
a[pos - 1] =num;
size++;

}

best case - O(1) worst case - O(n)
general - O(n-p) // p - position

// for an unsorted array  
a[size] = a[size-1];
a[pos-1] = num;

//Deletion in Array

if(pos <= 0 || pos >size){
	printf("Invalid pos");
}

else{
	for(int i = pos -1;i <size-1;i++){
	     a[i] = a[i+1]; //swapping every element to the right from the position of the element to be
	      deleted
	}
	size --;
}

//Array and pointer

int a[] = {6,2,1,5,3};

a[2] = *(a+2) = 2[a];

a + 1; // next element address
&a + 1; //end of array address
&a[0] + 1; //104 assuming base address to be 100

scanf("%d", &a[i]); //or &q[i] 

//2-D Array

int a [][3]; //valid
int a [2][]; //invalid

a[i][j] = B + [((i-1)*n) + (j-1)]*size; //row major
a[i][j] = B + [((j-1)*m) + (i-1)]*size; //column major

//Pointers and 2-D arrays

int a[3][3] = {6,2,5,0,1,3,4,9,8};

a[0] = {6,2,5};
a[1] = {0,1,3};
a[2] = {4,9,8};

int *p;
p = &a[0][0]; or p = a[0];

if address starts from 100 then,
a+1 = 112(addy)  //Starting address of a[1] //&a[1]
*(a+1) = 112 / a[i] / &a[1][0]  //(a+1) is itself a 1D array.
*(a+1)+2 = 120 //112 + 4*2 = 120 

*(*(a+1) + 2) = 3
 
//Linked List

MemoryManager - The one who allocates space 

*In an array of size 200 if only 10 are being used by the programmer then it will lead to wastage of 
memory

*Linked List doesnt store vals in continuous location
  -pointer to the next node
4|113  3|123  8|132  9|NULL
 102    113    123    132

*Insertion in linked list will remove the fixed size problem with arrays

 struct node{
    int a; //value of node
    struct node * next; //pointer of the node pointing to the next node
 }

Accessing any element in linked list - O(n) (worst case)

*Insertion and deletion is easier than array.

//Types of Linked List

//Singly linked list
*Single list to next node.
*Only forward traversal is possible.

struct node{
    int a; //value of node
    struct node * next; //pointer of the node pointing to the next node
 }

//Doubly linked list
- points to previous node in the list
pt1 | data | prt2 
               -points to next node in the list 

100 -> |NULL| 1 |200| <->|100| 2 |300|  <-> |200| 3 |NULL| 
head         100             200               300

struct node
{
	int node;
	struct node * next;   //address of the variable to be stores, its datatype is struct node hence  
	                                                                                   struct node*
	struct node * prev;
}

//Circular linked list (singly)

100   ->|1|200| -> |8|300| -> |10|100|  --
head      100        200         300      |
           ^------------------------------|

//Doubly circular linked list
             
            
100 ->|300 | 1 |200| <-> |100|2|300|  <->  |200|3|100| <--
head        100              200                300       |
             ^--------------------------------------------|

//Array vs Linked List
                                                Array             Linked list
cost of accessing an element    :               O(1)              O(n)

Memory requirement(MR) +        :               MR less           MR more
Memory utilization(MU)                          MU less           MU more

cost of insertion               :

   1)At beginning               :               O(n)              O(1)
   2)At end                     :               O(1)              O(n)  //traversal
   3)At ith postion             :               O(n)              O(n)

Search algo                     :               Linear & Binary   Linear

//Implementation of linked list

struct node{
	int data;
	struct node* next;
};
              //-the head of linked list
struct node* head , *newnode , *temp; //temp a value we can change to make links to new nodes
head = 0;           //-To create a new node
 
newnode = (struct node *)malloc(sizeof(struct node));
printf("Enter data");  
scanf("%d",&newnode->5);
newnode->next = 0; // |5|0| //data 5 and pointing to 0 cause its not pointing to anything atm.
//newnode is a pointer pointing the base address of the created node, which is 
//what head is supposed to hold hence,
if(head == 0){
  head = temp = newnode; 
}
else{
  temp->next = newnode;
  temp = newnode;
}
   
//Link  traversal 

temp = head; //from start
while(temp!= 0){
	printf("%d",temp->data);
	temp = temp -> next;
}

//Insertion in linked list
 
struct node{
	int data;
	struct node *next;
}
struct node *head, *newnode;
                     -> new node to be inserted

newnode = (struct node *)malloc(sizeof(struct node));
                  ->type casting     -> return void pointer
printf("Enter data you want to insert");
scanf("%d", &newnode->data);

//Insert at beginning
newnode -> next = head; //address in head is that of the 1st node which is now stored in newnode
head = newnode; // head is updated to contain newnodes address

//Insert at end
struct node* temp;
newnode->next = 0; //making next address null cause its going to be the new end node.
temp = head; //temp for traversing the list cause head cant be changed
while(temp-> next !=0 ){
   temp = temp->next;    //points to the next element each iteration //it will traverse upto the 
                           current end node.
}
temp-> next = newnode;  //current end nodes next will now point to newnode's address

//Insert at a certain position(check position is valid first)

printf("Enter position");
scanf("%d",&pos);
struct node* temp;
int i = 1;
temp = head;
while(i < pos){
	temp = temp->next;
	i++;
}
printf("Enter data");
scanf("%d",&newnode -> data);
newnode->next = temp->next;
temp->next = newnode;

//Deletion from linked list

struct node{
	int data;
	struct node *next;
}
struct node *head;

//Delete from beginning (check if list is empty first )

struct node *temp;
temp = head;
head = head ->next; // pointing to next node and leaving the first node

free(temp); //completely deletes the node

//Delete from end 

struct node *temp, *prevnode;
temp = head;
while(temp->next != 0){
    prevnode = temp; // will store a node before temp
	temp = temp->next;
}
if(temp == head){ //only one node
	head = 0; 
}
else{
    prevnode->next = 0;
}
free(temp); //completely deleting the end node

//Delete from a specific position

struct node{
	int data;
	struct node* next;
} 
struct node *head,*temp , *nextnode;
temp = head;
int pos = 0 , i = 1;
printf("Enter position");
scanf("%d",&pos);

while(i < pos-1){    //iterate till a position before before the entered postiion
	temp = temp -> next;
	i++;
}
nextnode = temp->next;
temp->next = nextnode->next;
free(nextnode);

//Reverse a Linked List
 struct node{
   int data;
   struct node *next;
 };
struct node * head;

//Reverse a linked list

void reverse(){
	struct node *prevnode,*currentnode,*nextnode;
	prevnode = 0;
	currentnode = nextnode = head;
	while ( nextnode!=  0){
	    nextnode = nextnode->next;
	    currentnode->next  = prevnode;
	    prevnode = currentnode;
	    currentnode = nextnode;
	}
	head = prevnode;
}


//Doubly linked list

struct node{
	int data;
	struct node* next;
	struct node* prev; 
}
struct node* head, *newnode;

void create(){
      struct node *temp;
	  newnode =  (struct node*)malloc(sizeof(struct node));
	  printf("\nEnter data");
	  scanf("%d",&newnode->data);
	  newnode -> prev = 0;
	  newnode -> next = 0;
	  if(head == 0){
	   head = temp = newnode;
	  }
	  else{
	    temp->next = newnode;
	    newnode->prev = temp;
	    temp = newnode;    
	  }
}

//insertion in Doubly linked list

struct node{
	int data;
	struct node* next;
	struct node* prev; 
}
struct node* head, *newnode , *tail;

void insertatbeg(){
    newnode = (struct node*)malloc(sizeof(struct node)); 
    newnode->next = newnode-> prev = 0;             //just creating a newnode no relation with code
	newnode->next = head;
	head->prev = newnode;
	head = newnode;
}

void create(){  
    newnode = (struct node*)malloc(sizeof(struct node)); 
    newnode->next = 0;
    newnode->prev = 0;
	if(head == 0){
	  head = newnode;
	  tail = newnode;
	}
	else{
	   newnode->prev = tail;
	   tail->next = newnode;
       tail = newnode;
	}
}

void insertatend(){             //this is if a tail pointer is kept at creation (in create())
	tail->next = newnode;
	newnode->prev = tail;
	tail = newnode;
}

void insertAtpos(){
	 struct* node temp;
	 temp = head;
	 int n =0 ;
	 newnode = (struct node*)malloc(sizeof(struct node)); 
     newnode->next = 0;
     newnode->prev = 0;
     //check if pos is < length and create else if condition for (pos ==1)
	 while(n < pos-1){ /
	   temp = temp->next;
	   n++;
	 }
	 newnode->next = temp->next;
	 temp->next = newnode;
	 newnode->prev = temp;
	 newnode->next->prev = newnode; //the next node's previous
}

void insertafterpos(){} //same as atpos() without (pos == 1) condition  and then while(n<pos)

//Deletion in doubly linked list

void delfromebeg(){
    if(head == 0 ){
       printf("List empty");
    }
    else{
    temp = head;
    head = head->next;
    head->prev = 0;
    free(temp);
    }
}

void delfromend(){
    struct node* temp;
    temp = tail
	tail->prev->next = 0;
	tail = tail->prev;
	free(temp);
}

void deletefrompos(){
	struct node* temp;
	temp = head;
	int n = 0;
	//check postion 
	while( n < pos){
	   temp  = temp->next;
	}
	temp->prev->next = temp->next;
	temp->next->prev = temp->prev;
	free(temp);
}

//Reversing a doubly linked list


void reverse(){
	struct node* current, nextnode;
	current = (struct node*)malloc(sizeof(struct node));
	nextnode = (struct node*)malloc(sizeof(struct node));
	current = head;
	while(current != 0 ){
	  nextnode = current->next;
	  current->next = current->prev;
	  current->prev =  nextnode;
	  current = nextnode;
	}
	current = head;    //swapping head and tail for further use in the program
	head = tail;       //the above loop itself should reverse it 
	tail = current;
}

//Circular linked list

struct node{
	int data;
	struct node* next;
}
struct node* head,temp;

//creation

void createcll(){
	struct node* newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	scanf("%d", &newnode->data);
	newnode->next = 0;
	if(head == 0){
	  head = temp = newnode;
	}
	else{
	  temp->next = newnode;
	  temp = newnode;
	}
	temp->next = head;
}

//Display

void display(){
    //check if list is empty first
	temp = head;
	while(temp -> next != head){
	   printf("%d",temp->data);
	   temp = temp->next;
	}
	print("%d", temp->data); //the last node doesnt satisfy the condition hence we have print it
	                         //outside the loop
}


//creation while maintaining a tail pointer (you can do this only by using tail and no head)

struct node* tail;

void createcll(){
	struct node* newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	scanf("%d", &newnode->data);
	newnode->next = 0;
	if(head == 0){
	  head = tail = newnode;
	}
	else{
	  tail->next = newnode;
	  tail = newnode;
	}
	tail->next = head;
}

//Insertion in circular linked list (no head , just tail)

void insertatbeg(){
   if(tail == 0){
    tail = newnode;
    tail->next = newnode;
   }
   else{
	newnode->next = tail->next;
	tail -> next = newnode; 
   }
}

void insertatend(){
	if(tail == 0){
	tail = newnode;
	tail->next = newnode;
	}
	else{
	newnode->next = tail->next;
	tail->next = newnode;
	tail = newnode;
	}
}

void insertatpos(){
	temp = tail->next;
	int n = 0;
	//check if valid pos
	if(pos == 1){
	 insertatbeg();
	}
	else{
	while(n < pos - 1){
       temp  = temp->next;
       n++:
	}
    newnode->next = temp->next;
    temp->next = newnode;
    }

}

//Deletion in circular Linked list (no head, just tail)

void delfrombeg(){
    temp = tail->next;
    if(tail == 0){
      printf("List empty");
    }
    else if(temp->next == tail){
    tail = 0;
    free(temp);
    }
    else{
	tail->next  = temp->next;
	free(temp);
	}
}

void delfromend(){
    struct node* current, previous;
	if(tail == 0 ){
	printf("List empty");
	}
	else if(current->next == current){
     tail= 0;
     free(current);
	}
	else{
	 while(current->next != tail->next){
	 previous = current;
	 current = current->next;
	 } 
	 pervious->next = tail->next;
     free(current);
     tail = previous;
	}
}

void delfrompos(){
	struct node* cureent , previous;
	current = tail->next;
	int n = 0;
	//check pos is valid (if pos == 1 delfrombeg() && if pos == length() delfromend())
	while(n < pos ){
	previous = current;
	current = current->next
    n++;
	}
	previous->next = current->next;
	free(current);
}

//Reverse a circular linked list

void reverse(){
	struct node* current , previou ,nextnode;
	current = (struct node*)malloc(sizeof(struct node));
	previous = (struct node*)malloc(sizeof(struct node));
	nextnode = (struct node*)malloc(sizeof(struct node));
	current = tail->next;
	nextnode = current-.next;
	while(current != tail){
      previous = current;
      current = nextnode;
      nextnode = current->next;
      current->next = previous;
	}
	nextnode->next = tail;
	tail = nextnode;
}

// Doubly Circular linked List

struct node{
	int data;
	struct node* next;
	struct node* prev;
}
struct node *head, *tail;

void createDCLL(){
	struct node *newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	if(head == 0){
	  head = tail = newnode;
	  head->next = newnode;
	  head->prev = newnode;
	}
	else{
	  newnode->next = tail->next;
	  newnode->prev = tail;
      tail->next = newnode;
      tail = newnode;
	}
}

//Insertion in Doubly circular linked list

void insertAtbeg(){
    struct node* newnode;
    newnode = (struct node*)malloc(sizeof(struct node));
    if(head == 0){
     head = tail = newnode;
     newnode->next = tail;
     newnode->prev = head
    }
    else{
	newnode->next = head;
	newnode->prev = tail;
	head->prev = newnode;
	head = newnode;
	tail->next = newnode;
	}
}

void insertAtend(){
	struct node *newnode;
	newnode = (struct node *)malloc(sizeof(struct node));
	if(head == 0){
	  head = tail =newnode;
	  head-> next = head->prev = newnode;
	}
	else{
	 newnode->next = head;
	 tail->next = newnode;
	 newnode->prev = tail;
	 tail = newnode;
	 head->prev = newnode;
	}
}

void insertAtpos(){
	struct node *newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	if(pos < 1 || pos > getlength()) { //create a getlength() to find length of the list 
       printf("Invalid pos");
	}
	else if(pos == 0){
	insertAtbeg();
	}
	else if (pos == getlength()){
	insertAtend();
	}
	else {
	   struct node* temp;
	   temp = head;
	   int n = 1;
	   while(n < pos-1){
           temp = temp->next;
           n++;
	   }
	   newnode->next = temp->next;
	   newnode->prev = temp;
	   temp->next->prev = newnode;
	   temp->next = newnode;
	}
}

// Deletion from a doubly linked list

void delfrombeg(){
   struct node* temp;
	temp = head;
   if(head == 0){
    printf("Underflow");
   }
   else if(head->next == head){
      temp = head;
      head = tail = 0;
      free(temp);
   }
   else{
	tail->next = head->next;
	head->next->prev= tail;
	head = head->next;
	free(temp);
   }
}

void delfromend(){
	struct node* temp;
	temp = tail;
	if(head == 0){
	  printf("Underflow");
	}
	else if(head->next == head){
	  head = tail = 0;
	  free(temp);
	}
	else{
	  tail->prev->next = tail->next;
	  tail->next->prev = tail->prev;
	  tail = tail->prev;
      free(temp);
	}
}

void delfrompos(){
	struct node* temp;
	temp = head;
	int i = 1;
	if(pos < 1 || pos > getlength()) { //create a getlength() to find length of the list 
       printf("Invalid pos");
	}
	else if(pos == 0){
	delfrombeg();
	}
	else if (pos == getlength()){
	delfromend();
	}
	while(i < pos ){
	  temp = temp->next;
	  i++;
	}
	temp->prev->next  = temp->next;
	temp->next->prev = temp->prev;
	if(temp->next == tail){
        tail = temp->prev;
        free(temp);
	}
	else{
        free(temp);
	}
}

//Stack 

-> Linear data structure.
-> insertion and deletion is possible only from one end.

Operations:

push(x)
pop()
peek() / top () -> return top most element
isEmpty() -> returns true if stack is empty else false
isFull() -> returns true if stack is full else false 

//Stack using Array's

#define N 5;
int stack[N];
int top = -1;

void push(){
 if(top == N - 1)
   printf("Overflow");
 else{
  printf("Enter data");
  scanf("%d",&data);
  top++;
  stack[top] = data;
 }
}

void pop(){
  if(top == -1){
  printf("Underflow");
  }
  else{
   top--;
  }
}

void peek(){
  if(top == -1){
  printf("the stack is empty");
  }
  else{
   printf("%d",stack[top]);
  }
}

void display(){
  for(int i = top; i >= 0; i--){
  printf("%d",stack[top);
  }
}

void main(){
	push();
	pop();
	peek();
	display();
}

//Stack using Linked list

struct node{
	int data;
	struct node *next;
}
struct node *top;

void push(int x){
	struct node *newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = x;
	newnode->next = top;
	top = newnode;
}

void display(){
    struct node* temp;
    temp = top;
    if(top == 0){
      printf("Stack empty");
    }
    else{
		while(temp != 0){
		  printf("%d",temp->data);
		  temp = temp->next;
		}
	}
}

void peek(){
    // if(top == 0){printf("Stack is empty")} else part below
	printf("%d",top->data);
}

void pop(){
    // if(top == 0){printf("Stack is empty")} else part below
	struct node* temp;
	temp = top;
	top = top->next;
	free(temp);

}

//Infix Prefix Postfix

Infix - <operand><operator><operand>

(1) (){}[]
(2) ^       R-L
(3) * /     L-R
(4) + -     L-R

Prefix - <operator><operand><operand>
//infix to prefix
5 + 1 -> +51
a*b + c = *ab +c => +*abc

Postfix - <operator><operand><operator>
//infix to posfix
5 + 1 -> 51+
a*b + c = ab* + c =>  ab*c+

//Infix to post fix conversion

Print operands as they arrive

If stack is empty or contains a left parenthesis on top, push the incoming
operator onto the attack

If incoming symbol is '(', push it onto stack

If incoming symbol is ')', pop the stack and print the operators until left
parenthesis is found

If incoming symbol has higher precedence than the top of the stack, push it
on the stack

If incoming symbol has lower precedence than the top of the stack, pop and 
print the top. Then test the incoming operator against the new top of the stack

If incoming opertor has equal precedence with the top of the stack, use associativity rule.

At the end of the expression, pop and print all operator of stack

Associativity L to R , then pop and print the top of the stack and then push the incoming 
operator

R to L , then push the incoming operator

//Queue
enqueue()
dequeue()
front()/peek()
isfull()
isEmpty()

front = rear = -1; //queue is empty

Application: Single shared resource (Eg: printer (print queue))

//Implementation of queue using array
#define N 5
int queue[N];
int front = -1 , rear = -1;

void enqueue(int x){
	if(rear == N-1){
	printf("Overflow");
	}
	else if (front == -1 && rear == -1){
	font = rear = 0;
	queue[rear] = x;
	}
	else{
	rear++;
	queue[rear] = x;
	}
}

void dequeue(){
	if(front == -1 && rear == -1){
	printf("Underflow");
	}
	else if(front == rear){
	front = rear = -1;
	}
	else{
	front++;
	}
}

void display(){
	if(front == -1 && rear == -1){
	printf("Queue is empty");
	}
	else{
	 for(int i = front; i <=rear; i++){
     	printf("%d",queue[i]);
	 }
	}
}

void peek(){
	if(front == -1 && rear == -1){
	printf("Queue is empty");
	}
	else{
	printf("%d",queue[front]);
	}
}
*Memory wasteage: front and rear can be at index 1. Which means index 0 will be left free
and unused 

//Implementation of Queue using linked list

struct node {
	int data;
	struct node* next;
} 
struct node* front = 0;
struct node* rear = 0;

void enqueue(int x){
	struct node* newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = x;
	newnode->next = 0;

	if(front == 0 && rear == 0){
	  front = rear = newnode;
	}
	else{
	  rear->next = newnode;
	  rear = newnode;
	}
}

void display(){
    if( front == 0  && rear == 0){
    printf("Queue is empty");
    }
    else{
	struct node* temp = front;
	while(temp != 0 ){
	 printf("%d", temp->data);
	 temp = temp->next;
	}
	}
}

void dequeue(){
   
  if(front == 0 && rear == 0){
  printf("Underflow");
  }
  else{
     struct node* temp;
     temp = front;
     front = front->next;
     free(temp);
  }
}

void peek(){
   if(front == 0){
   printf("Queue is empty");
   }
   else{
   printf("%d",front->data);
   }  
}

//Circular Queue Implementation using arrays

#define N 5
int queue[N];
int front = -1;
int rear = -1;

int enqueue(int x){
	if(front == -1 && rear == -1){
        front = rear = 0;
        queue[front] = x;
	}
	else if( (rear+1)% N == front){
       printf("Overflow");
	}
	else{
	  rear = (rear+1)%N;
	  queue[rear] = x;
	}
}

void dequeue(){
	if(front == -1 && rear == -1){
	printf("The Queue is empty");
	}
	else if (front == rear){
       front = rear = -1;
	}
	else{
	  front = (front+1)%N;
	} 
}

void display(){
	if(front == -1 && rear == -1){
	printf("Queue empty");
	}
	else{
	int i = front;
	 while(i! = rear){
	 printf("%d", queue[i]);
	 i = (i+1)%N;
	 }
	 printf("%d", queue[rear]);
	}
}

//Circular queue using Linked list
struct node{
	int data;
	struct node* next;
}
struct node* front = 0,rear = 0;

void enqueue(int x){
	struct node* newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = x;
	if(front == 0 && rear == 0){
	front = rear = newnode;
	rear->next = newnode;
	}
	else{
	rear->next = newnode;
	newnode->next = front;
	rear = newnode; 
	}
}

void dequeue(){
	struct node* temp;
	temp = front;
	if(front == 0 && rear == 0){
	printf("Underflow");
	}
	else if(front == rear){
	 front = rear = 0;
	 free(temp);
	}
	else{
	rear->next = front->next;
	front = front->next;
	free(temp);
	}
}

void display(){
	struct node* temp;
	temp = front;
	if(front == 0 && rear == 0){
	printf("The queue is empty");
	}
	else{
	  while(temp->next != front){
	  printf("%d", temp->data);
	  temp = temp->next;
	  }
	  printf("%d", temp->data);
	}
}

//Implimenting queue using Stack (stack1 -> enqueue stack2 -> dequeue)
//enqueue(O(1)) and dequeue(O(n))

#define N 5

int s1[N], s2[N];
int top1 =-1,top2=-1,count = 0;

void push1(int data){
	if(top1 == N-1){
	printf("Overflow");
	}
	else{
	top1++;
	s1[top1] = data;
	}
}

void enqueue(int x){
	push1(x);
	count++;
}

void push2(int data){
	if(top2 == N-1){
	printf("Overflow");
	}
	else{
	top2++;
	s2[top2] = data;
	}
}
int pop1(){
	return s1[top1 --];
}

int pop2(){
	return s2[top2 --];
}
void dequeue(){
	if(top1 == -1 && top2 == -1){
	printf("Queue is empty");
	}
	else{
       for(int i = 0; i<count;i++){
       a= pop1(); // popping 'a' from stack 1
       push2(a);  // pushig it into stack 2
       }
       b = pop2();
       printf("%d",b); //printing dequeued element
       count --;
       for(int i = 0; i<count;i++){
       a  = pop2();
       push1(a);
       }
	}
}

void display(){
	int i;
	for(i = 0; i<=top;i++){
	printf("%d",s1[i]);
	}
}

//Deque (Double ended queue)

//Insertion and deletion are allowed from both ends
//Input-restricted deque //insertion from one end and deletion from both
//output-restricted dque //insertion from both and deletion from one

//operation
->InsertAtFront
->DeleteFromFront
->InsertAtRear
->DeleteFromRear

*Can be used for checking palindromes
*Multiprocessor Scheduling

//Implementation of Deque using Circular array

#define N 5

int deque[N];
int f=-1,r=-1;

void enqueuefront(int x){
	if( f==0 && r == N -1 || f == r -1 ){
	printf("Queue is full");
	} 
	else if(f == -1 && r == -1){
	f = 0, r = 0;
	deque[f] = x;
	}
	else if(f == 0){
	f = N-1;
	deque[f] = x;
	}
	else{
	f -- ;
	 deque[f] = x;
	}
} 

void enqueuerear(int x){
	if(f == 0 && r == N-1 || front == rear +1){
	printf("Queue is full");
	}
	else if(f == -1 && r == -1){
	 f = r = 0;
	 deque[r] =x ; 
	}
	else if(r == N-1){
	r = 0;
	deque[r] = x;
	}
	else{
	r++;
	deque[r] = x;
	}
}

void display(){
	int i = f;
	while(i != rear){
	printf("%d", deque[i]);
	i = (i+1)%N;
	}
	printf("%d",deque[rear]);
}

void dequeuefront(){
	if( f == -1 && r == -1){
	printf("empty");
	}
	else if ( f ==r ){
	f = r - 1;
	}
	else if( f == N-1 ){
	 f = 0;
	}
	else{
	f++;
	}
}

void dequeuerear(){
	if( f == -1 && r == -1){
	printf("queue is empty");
	}
	else if(f == r){
	 f = r = -1; 
	} 
	else if(r == 0){
	 r = N-1;
	}
	else{
	 r --;
	}
}

//Tree

*Linear Data structure -> array's , linked list, queue and stack
*Non-linear Data structure -> tree , graph

*Only top to bottom access is possible
*The immediate predicissor (the previous node) of a node is its parent node
*The immediate successor of a node is its child node
*The node with no child node -> leaf node
*The node with no parent node -> root node
*Non-leaf node -> Internal nodes
*Path - sequence of consequtive edges from source node to destination node
*Ancestor - Any node between root and that node
*Decentand - Any node from that node to leaf node
*Sub-Tree - Sub-tree is a tree which contain another tree node and all its decentands
*Sibling - children of same parent
*Degree of a node - no.of children of that node

*Depth of a node  - no.of edges from root to a certain node.
*Height of a node - no.of edges from a certain node to its leaf node (longest)
*Level of a node  - no.of edges from root to a certain node.(represent each step as level)[Depth]

*Height of tree - height of root node
*Level of tree  - height of tree
 
*n nodes -> (n-1)edges 

App - file systems, routing protocols

//Binary Tree

Binary tree - A tree can have atmost two children

The maximum no.of nodes possible at any level 'i' is - 2^i
The maximum no.of nodes of height 'h' - (2^(h+1) - 1)
The minimum no.of nodes of height 'h' - h+1

//Full/Strict Binary Tree

Each node should have either 0 or 2 children.

no.of leaf node = no.of internal node + 1

Max nodes - (2^(h+1) - 1)
Min nodes = 2h+1

//Complete Binary Tree

All levels are completely filled except the last level. The last level has nodes
as left as possible (filled from left to right)

Max nodes - (2^(h+1) - 1)
Min nodes = 2^h

//Perfect Binary Tree

All internal nodes have 2 children and all leaves are at the same level.

//Degenerate Binary Tree

All internal nodes have 1 child

Filling in left  - left skewed binary tree
Filling in right - right skewed binary tree

//Binary Tree Implementation

struct node{
	int data;
	struct node *left, *right;
};

struct node* create(){
    int x;
	struct node *newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	printf("Enter data (-1 for no node)");
	scanf("%d",&x);
	if(x == -1){
	 return 0;
	}
	newnode->data = x;
	printf("Enter left child of %d",x);
	newnode->left = create();
	printf("Enter right child of %d",x);
	newnode->right = create();
	return newnode;
}

//Binary Tree Implimentation (Sequential Representation)

Inorder   - left root right   (root in-between)
Preorder  - root left right   (root at first)
Postorder - left right root   (root at last)

//Binary Tree traversals

void preorder(strcut node* root){
	 if(root == 0){
	 return;
	 }
	 printf("%d",root->data);
	 preorder(root->left);
	 preorder(root->right);
}

void inorder(strcut node* root){
	 if(root == 0){
	 return;
	 }
	 preorder(root->left);
	 printf("%d",root->data);
	 preorder(root->right);
}

void inorder(strcut node* root){
	 if(root == 0){
	 return;
	 }
	 preorder(root->left);
	 preorder(root->right);
	 printf("%d",root->data);
}




























































