Mutli-variable for loop

for(i = 0, j = 0; i <= 5; i++);

* Condition can be eliminated from the loop but then it will become an infinte loop ( for(;;) )

for( i= 0 , j = 0 ; i<5,j<3; i++ , j++); //this will execute till the second condition becomes false

* For two conditions to be considered you can use - i<5 & j <3

for( i = 1, j = 0; i<5 , j<= 6; i++, j++);
{
	printf("%d %d \n ",i,j);
} 
 //will print 8 7. Loop keeps on executeing till 7 6 then after loop finishes incremented
 //once more making it 8 7.

While loops  (Entery control loops)

void main(){
	int i = 1;
	while(i = 1){  // 1  => true 
	printf("%d",i);
	++i;
	}
	printf("End of Program");
	getch();
}

     First the loop condition is true hence it enters it body and runs and then again the condition is checked since it an assignment operator it also becomes true eeven though i becomes 2 when ++i is ran (infinite loop)

void main(){
	int i = 10;
	while(i){  // 1 or anything other thn 0 => true 
	printf("%d",i);
	++i;
	}
	printf("End of Program");
	getch();
}
      
     This is not an infinte loop cause at one time it will print 32767 then -32768 , -32767, -32766 till -1 . Then 0 comes at where the loop ends.

int i = 0;
while(i++) // condition does not satisfy
while(++i) // condition satisfies


void main(){

	char ch = 'a';
	while(ch){
	printf("%d",ch);
	ch++;
	}
	getch():
}
     This is not an infinte loop cause at one time it will print 127 then -128 , -127, -126 till -1 . Then 0 comes at where the loop ends.

do while loop ( Exit control loops )

do {
	statment;
}while(condition);

     The body of the do-while loop will be executed atleast once without checking any condition.

break statements in C

int a,i,sum=0;

for(i=0;i<=5;i++){
	printf("Enter a number");
	scanf("%d",a);
	if(a<0){
	break;     // if the number entered is <0 then the control flow will be thrown out of the loop (no other iteration will be entertained beyond this point)
	}
    sum = sum + a
}
printf("%d",sum);

continue statements in C

for(){
	s1;
	s2;
	continue; // control flow  goes to the next iteration of the loop (remaining s3,s4 are skipped)
	s3;
	s4;
}

Nested loops in C

Array in C

int a[2+2];  //a[4]
int a[3*2];  //a[6]
int a[11/2]; //a[5] (converts to int)
int a[0]; //not allowed in c (undefined behaviour)
 
Compile time Initialisation (static initialization)

int a[5] ={0,1,2,3,4};
int a[] = {0,1,2,3,4};
int a[5] = {0,1,2};  // a[5] = {0,1,2,0,0};
int a[5]; //grabage value
int a[5]= {} //error
char b[10] = {'j','e','n','n','y',null,null,null,null,null};

Run time Initialisation 

int a[5];
for(int i = 0;i<5;i++){
	scanf("%d",&a[i]);
}

int a[5] = { 1,10,0,-1,3};

Now 'a' stores the starting address of '1' (base address of the array)

Any variable that stores the address of any other variable is known as pointer variable.
* Base address + index * (size of datatype) -> To find the address of a certain element 

* There is no bound checking of array in C [ if an array of size 10 is declared accessing a[11] will return 
garbage values]


2D array:
  
datatype nameofarray[row][column]

compile time 

int a[2][3] = {0,0,0,1,1,1};    #row size not mandatory in this type of initialisation

                c1c2c3
              r1 0 0 0
              r2 1 1 1

int a[2][3] = {{0,0,0},{1,1,1}};


int a[2][3] = {0,0,1,1};
               
              0 0 1
              1 0 0 -> last two by deafult 0

int a[2][3] = {{0,0},{1,1}};

               0 0 0
               1 1 1  -> last digit of each row is deafult 0

int a[][3] = {0};  // One-D array with 3 0's


Run time: nexted loops
   scanf("%d", &a[i][j]);

Pointers In C (derived Datatype)

Pointers contains address of another variable 

datatype * pointer-name;

int* p, int * p , int *p -> All are same in C

  - Here the datatype of the address of the variable P is storing is Int. The pointer itself does 
    not come under the integer datatype

int a = 10;
int* p;
p = &a; // usage of pointer (address of 'a' stored in pointer p)

int *p =&a ; a = 10 //This is wrong since 'a' is not declared and the pointer will not be pointing to the 
right address

& - address of op
* - Indirection op

On a 16bit machine , the size of pointer can be 2 bytes and 
On a 32bit machine , the size of pointer can be 4 bytes

p = &a, &b;
* address of 'a' assigned to p cause '=' has higher precedence than ','
P = (&a,&b); //when in brackets one executed and discarded and second one returned 
* address of 'b' assigned to p 

Printing value of pointer 

printf("a= %d", *p); // *p will print the value at the address which is stored in p.

Printing hexadecimal address of 'a'

printf("address of a = %x", &a);
or
printf("address of a = %x", p);

Pointer Assignment

int  a =10 , b = 11;
int *p, *q;
p = &a;         //p has a's address 
q = p;          //now both p and q is pointing to 'a'

Pointer to Pointer 

int a = 10;
int *p = &a;
  -Here a's datatype is int
int* *q = &p;
  -Here p's datatype is int* cause its a pointer

printf(" a= %d %d %d", a,*p,**q);
                             -*q will give value of P and one * will give the value at the value which is 
                               stored in p

int ** *r = &q; //level can be increase like this 
    -to access value of 'a' using this three level pointer ***r

 *q = 25; //illegal
  -Here we are trying to store a integer value at 'p' but the datatype supported is 'int*'

Pointer Arithematics

int *q;
int a =10;
int *p = &a;
p + q; //invalid
p=p+2 ; //correct
  Here if 'a''s base address is 1000 then 1000+2 != 1002. Cause when we add 2 it will jump 2 times the 
  datatype size. 
  Formula 
     p + n = 1000 + n * (Size of datatype);

int a[5] = {0,1,-1,10,1};
int *p = &a[0];
printf("%d",*p); //prints first element

p = p + 2;
printf("%d",*p); //prints third element

a = a + 3; //wrong (a is a constant pointer and it will always point to the base address)

Addition - We can not add two pointers 

Subtraction

int d;
int a[] = {0,1,-1,10,11};  // 0 - 1000 , 1 -  1004 , -1 - 1008, 10 - 1012 , 11 -1016
int *p = &a[0];
int *q = &a[3];

d = q - p;
   //1012 - 1000 = 12 / (datatype) => 12/4 => 3 (3 elements between p and q)

q = q - 2; // 1012 - 2*4 => 1004 (2 positiion backward)

int *p = a; // where a is an array then it is right. Cause a points to the base address of the array

Increment and decrement of Pointers

int a[] = {3,5,8,3,0,7}
int *p;
p = a;
p++;
printf("%d",*p); //prints second element

printf("%d", *p++) //prints first element

printf("%d", * ++p) //prints second element

printf("%d %d", *p++, *p++) //right to left execution (2 and 3)
 
int a[] = {2,3,67,4,5};
int* p = &a[2]:
printf("%d %d %d", *--p, *--p, *--p); //   garbage-val 3 2

Void Pointer

int a = 5;
void *vp = &a;
printf("%d", *vp); //wrong (illegal)
*You can not reference a void pointer 


void *vp = &a;
printf("%d", *(int*)vp); //void pointer can only be referenced after type casting
                - Type casting into integer pointer
In the same program,
char c = 'l';
vp = &c;
printf("%d", *(char*)vp); //Same pointer can be used for multiple data types.
* malloc and calloc returns void pointers

Null Pointer in C

int *ptr = NULL; //makesure after initialisation its not pointing any garbage value
           -value => 0. It is pointing to 0th memory location which is reserved 
                        You can not dereference that memory location.

printf("%d", ptr); // return 0
printf("%d", *ptr); //program crashes (trying to dereference NULL)

Dangling Pointer

int *ptr = (int*)malloc(sizeof(int));
*ptr = 10;
printf("%d", *ptr); // 10
free(ptr); //allocated memory is now freed (deallocation)

After the memory is freed it goes into free memory where 'ptr' is still pointing to
making it a dangling pointer.

printf("%d", *ptr); //undefined behaviour  

To get rid of a dangling pointer referecne it to NULL
ptr = NULL;


int* func(){
	int a = 9;
	return &a;
}
void main(){
	int *ptr = func();// a is a local variable. Hence unpredictable behaviour  or Error

}


void main(){
	int *ptr=NULL;
	{
	    int a=5;
	    ptr=&a;
	    printf("%d",*ptr); //inside this pointer it will give 5
	}
}

Wild Pointer

An uninitialised pointer is called wild pointer

int * ptr; //wild pointer

int *ptr = (int*)malloc(sizeof(int)); // no more a wild pointer

DMA (Dynamic Memory Allocation) - memory allocated at run time -> taken from Heap     |heap|
                                                                                      |stack|
-> all local variables and functions take memory from stack
SMA (Static Memory Allocation)  - memory allocated at compile time                    |global/static| -> golbal variables and static variables take memory here
                                                                                      |code/text|
In SMA - memory is fixed ( You can not free this memory at run time or increase or decrease this 
memory)

* Stack and heap will always grow in opposite direction. If heap is growing towards stack , stack will 
grow towards heap.

In DMA - memory can be freed and reused 

Dynamic Memory Allocation using malloc()

malloc() -> memory allocation (allocated from heap)

malloc(size) -> 'size' amount of bytes reserved from heap and return base address of this block (a 
void pointer)(Hence use pointers)

void* malloc(size_t size)  //backend
              -unsigned int

In some machine int take 4bytes and in some 2bytes so the best practice is 
      malloc([number of integers to store]*sizeof(int));
Since it returns a void pointer we typecast it.
       ptr = (int*)malloc([number of integers to store]*sizeof(int));
                   - In came of failure it will return NULL pointer.

int main(){
	int n, i ,*ptr;
	n =3;
	ptr =(int *)malloc(n * sizeof(int));   //here ptr becomes an array and can be used as ptr[i]
	printf("Enter Values");
    for (i = 0; i<n;i++){
       scanf("%d", (ptr + i)); // no '&' since ptr takes in addresses
    }
    for (i = 0; i<n;i++){
       printf("%d", *(ptr + i));
    }
    free(ptr);
    return 0; 
}

calloc() in C

calloc - contiguous allocation (uses the header stdlib.h)
       - allocates multiple blocks of memory
                           - size of each block
void *calloc (size_t n , size_t size)
                - no of blocks

calloc (5 , sizeof(int)); // 5 blocks of size of integer (returns base address of the reserved bytes
(void pointer))

ptr = (int *)calloc(5,sizeof(int));  5 blocks of 4 bytes
ptr = (int *)malloc(5* sizeof(int)); 1 block of 20bytes(5x 4)
   
If this calloc function is not initialised with any value then it will store 0's. Hence
if you print this it will print 0's

realloc in C
                       -new size
realloc (void *ptr, size_t size)
              - previously allocated pointer

   ptr = (int*)malloc(5* sizeof(int));
    ptr1    =(int*)realloc(ptr, newsize * sizeof(int)); // it will expand the current block if possible
If expansion is not possibe , it will allocate a new block , copy the content from the allocated block,
deallocate the previous block and expand it there.

         =(int*)realloc(NULL, n*sizeof(int)); //it acts similar to malloc
         =(int*)realloc(ptr,0); //it acts similar to free()

free() in c

Should not use ptr after freeing the ptr. If you call after freeing UB (undefined behaviour)

Memory leak in C

-> Due to improper use of heap

int sum(){
	int *ptr = (int*)malloc(2*(sizeof(int)));
	sum = (*(ptr+0) + *(ptr+1));
	printf("%d",sum);
}
int main(){
	int ch=1;
	while(ch){
	sum();
	printf("continue?");
	scanf("%d",&ch);
	}
}
   
On initial run , ptr gets allocated dynamic memory from heap. This memory is not freed
hence on the next run a new memory location is created and the other is left unbothered/unused.
This is memory is wasted (memory leak)

Strings in C
    - 1D character array
* String is not a datatype in C

String ends with a null character("\o")

char name[] = {'j,'e','n','n','y','\o'};

char name[] ="Jenny";
format specifier for string is '%s'

inputting string

  char name[30];
  printf("Enter name:"); 
  scanf("%s",&name);   // jayanti Khatri
  printf("%s",&name);   //jayanti
  
  gets(name); // jayanti Khatri

*Both scanf() and gets() is vulnerable to buffer overflow attack
   
   scanf("%4s",&name); //now it will only store 4 characters of the string
   use fgets() to bypass the buffer overflow vuln

printf("%.5s",name); //prints first five characters 
printf("%10.5s",name); // after 10 spaces the five characters will be printed 

puts(name); // from stdio.h //prints whatever is passed to it And automatically
add a new line

printf("%s", &name[2]); //prints from 2nd index (yanti) 

strlen(name); //returns length (unsigned int) of string(excluding the null character)(includes " ")

strcat(s1, s2); //concatinates s2 to s1. s1 -> destination s2 -> source (string.h)
- vulnerable to buffer overflow

//To avoid the buffer overflow
char s1[20] = "jenny";
char s2[7]  = "khatri";

len1 = strlen(s1);
len2 = strlen(s2);

for(int i=0; i<= len2; i++){
	
	s1[len1+i] = s2[i]
}


strcmp(str1,str2); //returns 0 if both the strings are same. Positive if str1 has ascii value
of the first character that does not match is greater than str2. Negative if st1 has ascii value
of the first character that does not match is lesser than str2.

//without strcmp 
for (i =0; s1[i]! ='\o' || s2[i]!= '\o';i ++){
	if( s1[i]! = s2[i]){
	flag=1;
	break;
	}
}

strrev(str); //returns reverse of the string

//without strrev()

int l = strlen(str);
for( i =0; i<l/2; i++){
    ch = str[i];
	str[i] = str[l-1-i];
	str[l-1-i] = ch;
}

//without strlwr() converting to lower in C

for (i = 0; s1[i]!= '\o';i++){
	if(s1[i]>= 65 && s1[i]<= 90 ){ //Upper characters
	s1[i] = s[i]+ 32;              //changing ASCII value to lower characters
	}
}

Functions in C

//Call by value (value copied)
void fun(int, int);

void main(){
	int x = 5, y = 7;
	fun(x,y);
	printf("%d %d", x,y); //5 7
}

void fun(int x, int y){
    x=7;y=5;
    printf("%d %d",x,y)	; // 7 5
}

//call by reference (pass address)
void fun(int, int);

void main(){
	int x = 5, y = 7;
	fun(&x,&y);
	printf("%d %d", x,y); //7 5
}

void fun(int* x, int* y){ //only pointers can taken in address hence the change
    *x=7;*y=5;
    printf("%d %d",*x,*y)	; // 7 5
}

datatype funcname(void); //if you dont want the user to input an argument into the funtion

//passing array in function

int avg(int [],int);

void main(){
	int marks[5];  
	int size = sizeof(marks)/sizeof(marks[0]); //sizeof(marks) -> 20 and sizeof(marks[]) -> 4
	                                            hence its 5.
	int c = avg(marks,size);
}

int avg (int marks[], int s){
	                //here if you do sizeof(marks) it will print 4bytes cause during function
	                call, only the pointer to the array is passed not the entire array itself.
}

//when passing string to a function use the following to find the length of the string

for(i=0;str[i]!='\0';i++){ \\correct way of writing null ('\0')
	length = length+1;
}

//Returning strings from a function

char* display(){
	return "Jenny";
}

void main(){
	char *str;
	str = display();
	printf("%s", str);f
}

if you write,

char* display(){
	char str[] = "Jenny"; //str stored in stack memory of this function
	return str;           //when control goes to main , the allocated stack memory is freed
}                         //Hence, you cannot access the original value of str anymore

//solution to the above

char* display(){
	static char str[] = "Jenny"; //for static and global the memory allocation is separate.
	                             //Hence it can be accessed from there.
	return str;
}

or

char* display(){
	char* str = "Jenny";
	return str;
}

//Returning pointer from function

int* returnpointer (int []);

void main(){
	int *p;
	int a[] = {1,2,3,4,5}; // we cant do this 'a = a + 2;' here cause 'a' is a constant pointer
	                         (base address of an array)
	p = returnpointer(a);
	printf("%d",*p); // prints 3
}

int * returnpointer(int a[]){
	a = a + 2; // pointing to 3 //here we can do this cause its just a pointer and not the whole
	              array.
	return a;
}

Storage classes in C

//4 Types
auto      -> deafult storage class
register
extern
static

scope - block
      - function/method
      - programs

//Header files

int a = 50;  //program scope

int main(){
	int a = 10;    //function scope
	{
	int a = 20;   //block scope 
	printf("Inside block1: %d",a); //20
	}
	{
	  printf("%d",a++); //10
	}
	printf("%d",a); // 11
	return 0;
}

//Auto storage class

auto int a;
Deafult value - Garbage value
scope - block or function (cannot be a global variable)
location - stack

//Register storage class

register int a;
Deafult value - Garbage value
scope - block or function
location - CPU registers 

Register storage class helps in accessing the variables quickly

We cannot get the address of register storage class variable using pointer

//Static storage class

Deafult value - 
static float x;     - 0.0
static int y;       - 0
static char ch;     - NULL
static char str[20] - NULL 
scope - within the block 
lifetime - till the end of the program

void main(){
	display();    //initially on call of static x , a new memory is created with deafault value as 0;
	display();    //initially created static memory is retained. 
}
void display(){
	static int x;
	x += 10;                //second function call value becomes 20
	printf("\n X= %d",x);  // first function call X = 10  //second function 20 is printed
}

//Extern storage class

extern int x; //no space/memory allocation for x

* In file1.c you have: int x =10;
* In file2,c you just need to do 'extern int x;'(global declaration) to free up space.
                                 'extern void display();' //use #include "file1.c"


int main(){
	extern int a;
	printf("%d",a); //prints 10
}
int a = 10;

//Structures in C

 struct student    //Just a template, no memory allocation. //structure name is optional
 {
  int rollno;
  char name[20];
  float marks;
 };               //($) }s1,s2; // }s = {35, "Ankur",70}

 void main(){
  int a;
  struct student s1;        // with no name , this defintion is not possible follow ($)
 }

 void main(){
  struct student s1 = {1,"jenny", 90.91}; 
 }

scanf("%d %s %f", &s2.rollno, &s2.name, &s2.marks); //each input in next new line 

* To take in string "&" is optional










































